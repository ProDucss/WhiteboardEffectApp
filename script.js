document.getElementById('applyEffect').addEventListener('click', async function() {    const fileInput = document.getElementById('pdfInput');    if (fileInput.files.length === 0) {        alert('Please upload a PDF file first.');        return;    }    const pdfFile = fileInput.files[0];    const pdfData = await pdfFile.arrayBuffer();    const pdfDoc = await PDFLib.PDFDocument.load(pdfData);    const totalPages = pdfDoc.getPageCount();    const newPdfDoc = await PDFLib.PDFDocument.create();        for (let i = 0; i < totalPages; i++) {        const [copiedPage] = await newPdfDoc.copyPages(pdfDoc, [i]);        const { width, height } = copiedPage.getSize();                const canvas = document.createElement('canvas');        canvas.width = width;        canvas.height = height;        const ctx = canvas.getContext('2d');        const pageImage = await copiedPage.renderToImage();        ctx.drawImage(pageImage, 0, 0);        let src = cv.imread(canvas);        let dst = new cv.Mat();                cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);        cv.GaussianBlur(src, src, new cv.Size(5, 5), 0);        cv.adaptiveThreshold(src, dst, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY, 11, 2);                cv.imshow(canvas, dst);        src.delete();        dst.delete();        const imageDataUrl = canvas.toDataURL();        const image = await PDFLib.PDFImage.create(imageDataUrl);                const newPage = newPdfDoc.addPage([width, height]);        newPage.drawImage(image, {            x: 0,            y: 0,            width: width,            height: height,        });    }    const pdfBytes = await newPdfDoc.save();        const downloadLink = document.getElementById('downloadLink');    downloadLink.href = URL.createObjectURL(new Blob([pdfBytes], { type: 'application/pdf' }));    downloadLink.download = 'Processed_Whiteboard_Effect.pdf';    downloadLink.style.display = 'block';    downloadLink.innerText = 'Download Processed PDF';});